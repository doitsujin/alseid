// Instance update preparation shader. Used to submit stream requests
// and instance update requests as necessary, using one thread per
// visible instance.
#version 460

#extension GL_GOOGLE_include_directive : enable

#define CS_MAIN csPrepareUpdate

#include "../../as_include_head.glsl"

#include "../group/as_group.glsl"

#include "../renderpass/as_renderpass.glsl"

#include "../as_scene.glsl"

#include "as_instance.glsl"

layout(local_size_x = PASS_GROUP_WORKGROUP_SIZE) in;

layout(push_constant)
uniform PushData {
  InstanceNodeBuffer  instanceBuffer;
  uint64_t            sceneBuffer;
  uint64_t            groupBuffer;
  uint32_t            frameId;
};

void csPrepareUpdate() {
  uint32_t gid = gl_GlobalInvocationID.x;

  // Exit early if the thread ID is out of bounds
  PassGroupBuffer group = PassGroupBuffer(groupBuffer);

  PassGroupNodeListIn nodeList = PassGroupNodeListIn(groupBuffer +
    group.nodeListOffsets[NODE_TYPE_INSTANCE - NODE_TYPE_BUILTIN_COUNT].nodeList);

  if (gid >= nodeList.header.entryCount)
    return;

  // Load instance properties and check whether we need to update it.
  uint32_t instanceNodeRef = nodeList.items[gid].nodeRef;
  uint32_t instanceIndex = getNodeIndexFromRef(instanceNodeRef);

  InstanceNode instance = instanceBuffer.nodes[instanceIndex];

  // Exit early if the instance has already been updated this frame
  if (instance.updateFrameId == frameId)
    return;

  // Disable motion vectors for the instance if the instance node itself has
  // been updated, since this indicates that it has been made resident.
  instance.flags &= ~INSTANCE_NO_MOTION_VECTORS_BIT;

  if (instance.updateFrameId == 0u)
    instance.flags |= INSTANCE_NO_MOTION_VECTORS_BIT;

  // Also disable motion vectors if the previous frame's node transform is not
  // up to date. This can happen if the containing BVH node got culled.
  SceneHeader scene = SceneHeaderIn(sceneBuffer).header;
  SceneNodeTransformBufferIn nodeTransforms = SceneNodeTransformBufferIn(sceneBuffer + scene.nodeTransformOffset);

  uvec2 nodeTransformIndices = nodeComputeTransformIndices(instance.nodeIndex, scene.nodeCount, frameId);
  uint nodeTransformUpdate = nodeTransforms.nodeTransforms[nodeTransformIndices.y].updateFrameId;

  if (nodeTransformUpdate + 1u < frameId)
    instance.flags |= INSTANCE_NO_MOTION_VECTORS_BIT;

  if ((instance.flags & INSTANCE_DEFORM_BIT) != 0) {
    // Always dispatch one extra update after the instance has last been
    // changed, so that the previous frame's animation data is valid.
    if (instance.updateFrameId <= instance.dirtyFrameId)
      instance.flags |= INSTANCE_DIRTY_DEFORM_BIT;

    if (instance.updateFrameId < instance.dirtyFrameId) {
      // Ensure that we do actually dispatch another update next frame.
      instance.dirtyFrameId = frameId;

      // If the instance hasn't been rendered since the last change to its
      // animation data more than one frame ago, motion vectors are invalid.
      if (instance.updateFrameId + 1u < frameId)
        instance.flags |= INSTANCE_NO_MOTION_VECTORS_BIT;
    }
  }

  // Check if the asset list has changed since the last update
  if (instance.assetListBuffer != uint64_t(0u)) {
    AssetListBufferIn assetList = AssetListBufferIn(instance.assetListBuffer);

    if (assetList.updateFrameId > instance.updateFrameId)
      instance.flags |= INSTANCE_DIRTY_ASSETS_BIT;
  }

  // Dispatch the node update if necessary.
  if ((instance.flags & INSTANCE_DIRTY_FLAGS) != 0u) {
    uint32_t payload = instance.flags >> INSTANCE_DIRTY_SHIFT;
    nodeListAddUpdate(groupBuffer, instanceNodeRef, payload, 1);
  }

  if ((instance.flags & INSTANCE_STATIC_BIT) != 0) {
    // Data from the previous frame is irrelevant for rendering shadow maps
    bool requiresUpdate = instance.updateFrameId < instance.dirtyFrameId;

    // Also check whether the absolute transform has changed between frames
    if (!requiresUpdate) {
      Transform currTransform = nodeTransforms.nodeTransforms[nodeTransformIndices.x].absoluteTransform;
      Transform prevTransform = nodeTransforms.nodeTransforms[nodeTransformIndices.y].absoluteTransform;

      requiresUpdate = any(notEqual(currTransform.rot, prevTransform.rot))
                    || any(notEqual(currTransform.pos, currTransform.pos));
    }

    // TODO add node to list of updated static nodes so that static
    // shadow maps can decide whether an update is required or not
  }

  // Write back any updated node properties, as well as the frame ID.
  instanceBuffer.nodes[instanceIndex].flags = instance.flags & ~INSTANCE_DIRTY_FLAGS;
  instanceBuffer.nodes[instanceIndex].dirtyFrameId = instance.dirtyFrameId;
  instanceBuffer.nodes[instanceIndex].updateFrameId = frameId;
}

#include "../../as_include_tail.glsl"
