// Mesh shader for occlusion testing
#version 460

#extension GL_GOOGLE_include_directive : enable

#include "../../as_include_head.glsl"

#include "../group/as_group.glsl"

#include "../renderpass/as_renderpass.glsl"

#include "../as_scene.glsl"

#include "as_occlusion_test.glsl"

#define MS_MAIN msMain

layout(triangles,
  max_vertices   =  8 * MS_OCCLUSION_BOX_COUNT,
  max_primitives = 12 * MS_OCCLUSION_BOX_COUNT) out;

// Per-primitive fragment shader inputs
#ifdef FS_UNIFORM
#undef FS_INPUT_VAR
#define FS_INPUT_VAR(l, t, n) layout l perprimitiveEXT flat out t fs_##n[];
FS_UNIFORM
#endif // FS_UNIFORM


// BVH properties stored in shared memory so that we can easily access
// it when processing primitives and vertices.
shared uint32_t csBvhIndicesShared[MS_OCCLUSION_BOX_COUNT];
shared Aabb csBvhAabbShared[MS_OCCLUSION_BOX_COUNT];
shared Transform csBvhTransformsShared[MS_OCCLUSION_BOX_COUNT];


// Packed primitive indices. Every set of four bits encodes
// the vertex indices to use for the given primitive.
const u64vec3 csPrimIndicesPacked = u64vec3(
  0x442211000000ul,
  0x767375654321ul,
  0x576737415263ul);


void msMain() {
  uint32_t tid = gl_LocalInvocationIndex;

  // Load render pass properties from pass buffer
  uint32_t passIndex = passGroupGetPassIndex(globals.passGroupVa, globals.passIndex);
  PassInfo passInfo = PassInfoBufferIn(globals.passInfoVa).passes[passIndex];

  // Load pointer to visibility, only used later.
  PassGroupBufferOut groupBuffer = PassGroupBufferOut(globals.passGroupVa);
  PassGroupBvhOcclusionTestBufferIn occlusionTest = PassGroupBvhOcclusionTestBufferIn(globals.passGroupVa + groupBuffer.bvhOcclusionOffset);
  uint64_t bvhVisibilityVa = globals.passGroupVa + groupBuffer.bvhVisibilityOffset;

  // Locate BVH node list inside the scene buffer
  SceneHeader sceneBuffer = SceneHeaderIn(globals.sceneVa).header;
  SceneNodeTransformBufferIn sceneTransforms = SceneNodeTransformBufferIn(globals.sceneVa + sceneBuffer.nodeTransformOffset);

  // Figure out which BVH nodes the current workgroup is working
  // on, as well as the local vertex and primitive indices.
  SceneBvhNodeBuffer bvhNodes = SceneBvhNodeBuffer(globals.sceneVa + sceneBuffer.bvhOffset);

  uint32_t boxIndex = gl_WorkGroupID.x * MS_OCCLUSION_BOX_COUNT;
  uint32_t boxCount = occlusionTest.msNodeCount;

  uint32_t localCount = min(boxCount - boxIndex, MS_OCCLUSION_BOX_COUNT);

  uint32_t vertCount = localCount * 8u;
  uint32_t primCount = localCount * 12u;

  // Allocate output storage as well while we're at it. No point
  // in exiting early since the local count cannot be 0.
  msSetMeshOutputs(vertCount, primCount);

  // Load relevant BVH properties into LDS
  if (tid < localCount) {
    uint32_t bvhIndex = getNodeIndexFromRef(occlusionTest.nodeRefs[boxIndex + tid]);
    uint32_t bvhNode = bvhNodes.nodes[bvhIndex].nodeIndex;

    uint32_t transformIndex = nodeComputeTransformIndices(
      bvhNode, sceneBuffer.nodeCount, globals.frameId).x;

    // Nvidia does not like us storing the 16-bit AABB
    // in LDS, so just convert it here.
    Aabb16 aabb = bvhNodes.nodes[bvhIndex].aabb;

    csBvhIndicesShared[tid] = bvhIndex;
    csBvhAabbShared[tid] = Aabb(aabb.lo, aabb.hi);
    csBvhTransformsShared[tid] = sceneTransforms.nodeTransforms[transformIndex].absoluteTransform;
  }

  barrier();

  MS_LOOP_WORKGROUP(index, vertCount, 8 * MS_OCCLUSION_BOX_COUNT) {
    uint32_t localVertBox = index >> 3u;
    uint32_t localVertIdx = index & 0x7u;

    Transform transform = csBvhTransformsShared[localVertBox];
    Aabb aabb = csBvhAabbShared[localVertBox];

    // Transform vertex into view space and apply further pass transforms
    transform = transChainNorm(passInfo.currTransform.transform, transform);

    vec3 vertex = aabbComputeVertex(aabb, localVertIdx);
    vertex = transApply(transform, vertex);

    if ((passInfo.flags & RENDER_PASS_USES_MIRROR_PLANE_BIT) != 0u)
      vertex = planeMirror(passInfo.currMirrorPlane, vertex);

    gl_MeshVerticesEXT[index].gl_Position = projApply(passInfo.projection, vertex);
  }

  MS_LOOP_WORKGROUP(index, primCount, 12 * MS_OCCLUSION_BOX_COUNT) {
    uint32_t localPrimBox = index / 12u;
    uint32_t localPrimIdx = index - 12u * localPrimBox;

    fs_bvhBufferVa[index] = bvhVisibilityVa;
    fs_bvhIndex[index] = csBvhIndicesShared[localPrimBox];
    fs_passIndex[index] = globals.passIndex;

    uvec3 localIndices = uvec3(csPrimIndicesPacked >> (4u * localPrimIdx)) & 0xfu;

    if ((passInfo.flags & RENDER_PASS_USES_MIRROR_PLANE_BIT) != 0u)
      localIndices.xyz = localIndices.xzy;

    gl_PrimitiveTriangleIndicesEXT[index] = localIndices + 8u * localPrimBox;
  }
}

#include "../../as_include_tail.glsl"
