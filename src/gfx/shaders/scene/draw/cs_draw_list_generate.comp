// Shader that performs culling and generate draw lists for a given set of
// render passes. Emits task shader workgroup counts as well as additional
// data read by the task shader during rendering.
#version 460

#extension GL_GOOGLE_include_directive : enable

#define CS_MAIN csGenerateDraws

#include "../../as_include_head.glsl"

#include "../group/as_group.glsl"

#include "../renderpass/as_renderpass.glsl"

#include "../as_scene.glsl"
#include "../as_scene_instance.glsl"

#include "as_draw.glsl"

layout(local_size_x = PASS_GROUP_WORKGROUP_SIZE) in;

layout(constant_id = SPEC_CONST_ID_TASK_SHADER_WORKGROUP_SIZE)
const uint CsTaskShaderWorkgroupSize = 128;

layout(push_constant)
uniform PushData {
  uint64_t            drawListVa;
  uint64_t            instanceVa;
  uint64_t            sceneVa;
  uint64_t            passInfoVa;
  uint64_t            passGroupVa;
  uint32_t            frameId;
  uint32_t            passMask;
  uint32_t            lodSelectionPass;
} globals;


struct InstanceDrawInfo {
  uint32_t            instanceIndex;
  uint32_t            drawCount;
  uint32_t            drawIndex;
  float               viewDistanceSq;
  uint32_t            passMask;
};


// Helper function to load an instance node from memory.
InstanceNode csLoadInstanceNode(uint32_t instanceIndex) {
  InstanceNodeBuffer instanceNodes = InstanceNodeBuffer(globals.instanceVa);
  return instanceNodes.nodes[instanceIndex];
}


// Convenience method to transform a model space vertex to view space,
// including any mirroring etc. from the render pass.
vec3 csTransformVertex(
  in    PassInfo                      passInfo,
  in    Transform                     transform,
        vec3                          vertex) {
  vertex = transApply(transform, vertex);

  if ((passInfo.flags & RENDER_PASS_USES_MIRROR_PLANE_BIT) != 0u)
    vertex = planeMirror(passInfo.currMirrorPlane, vertex);

  return vertex;
}


// Helper function to compute the view distance for the purpose of LOD selection.
// Uses the center of geometry's static AABB rather than the adjusted AABB for
// consistency regardless of animation.
float csComputeLodDistance(uint64_t geometryBuffer, in Transform worldTransform) {
  PassInfo passInfo = PassInfoBufferIn(globals.passInfoVa).passes[globals.lodSelectionPass];
  GeometryRef geometry = GeometryRef(geometryBuffer);

  Transform viewTransform = transChainNorm(
    passInfo.currTransform.transform, worldTransform);

  vec3 staticCenter = mix(
    vec3(geometry.geometry.aabb.lo),
    vec3(geometry.geometry.aabb.hi), 0.5f);

  staticCenter = csTransformVertex(passInfo, viewTransform, staticCenter);

  float viewDistanceSq = dot(staticCenter, staticCenter);
  return viewDistanceSq * passInfo.lodDistanceScale * passInfo.lodDistanceScale;
}


// Global draw info structure which stores information about the
// draws to emit for the current instance.
InstanceDrawInfo instanceDrawInfo;

void csInitDrawInfo() {
  instanceDrawInfo.instanceIndex = 0u;
  instanceDrawInfo.drawCount = 0u;
  instanceDrawInfo.drawIndex = 0u;
  instanceDrawInfo.viewDistanceSq = 0.0f;
  instanceDrawInfo.passMask = 0u;
}


// Helper function to read the global draw info structure from
// another invocation.
InstanceDrawInfo csGetDrawInfoForThread(uint32_t invocationIndex) {
  return InstanceDrawInfo(
    subgroupShuffle(instanceDrawInfo.instanceIndex, invocationIndex),
    subgroupShuffle(instanceDrawInfo.drawCount, invocationIndex),
    subgroupShuffle(instanceDrawInfo.drawIndex, invocationIndex),
    subgroupShuffle(instanceDrawInfo.viewDistanceSq, invocationIndex),
    subgroupShuffle(instanceDrawInfo.passMask, invocationIndex));
}


// Helper function to push the current invocation index to another invocation
// for data exchange purposes. Always needs to go through LDS since we cannot
// otherwise scan the accumulated draw counts in constant time.
shared int32_t csThreadIndexForOffsetShared[PASS_GROUP_WORKGROUP_SIZE];

int32_t csGetDataIndexForThread(uint32_t drawCount, uint32_t drawCountAccum) {
  uint32_t ofs = gl_SubgroupSize * gl_SubgroupID;
  uint32_t sid = gl_SubgroupInvocationID;

  // Initialize with an invalid index
  csThreadIndexForOffsetShared[ofs + sid] = -1;
  barrier();

  // Push source data thread index to the shared array if the draw
  // count is non-zero, and if its draws can actually be processed
  // in the current iteration
  if (drawCount > 0u && drawCountAccum < gl_SubgroupSize)
    csThreadIndexForOffsetShared[ofs + drawCountAccum] = int32_t(sid);
  barrier();

  // Fetch the index for the current thread. This will be negative
  // for most threads, so extra steps are needed to find the actual
  // thread and draw index.
  int32_t result = csThreadIndexForOffsetShared[ofs + sid];
  barrier();

  return result;
}


bool csPrepareNextIteration(out InstanceDrawInfo info) {
  if (gl_SubgroupSize * gl_NumSubgroups != PASS_GROUP_WORKGROUP_SIZE) {
    // Fallback path in case the subgroup layout is weird. This will emit one
    // draw per thread and iteration with no cross-thread communication.
    InstanceDrawInfo result = instanceDrawInfo;
    result.drawCount = result.drawIndex < result.drawCount ? 1u : 0u;

    info = result;

    if (result.drawCount == 0u)
      return false;

    instanceDrawInfo.drawIndex += 1u;
    return true;
  } else {
    // Optimized path. This will spread the workload of emitting draws across
    // all invocations in a subgroup in order to increase occupancy in case
    // draw counts are divergent. Don't bother with an LDS path since that
    // is extremely cursed and likely less efficient in the average case.
    uint32_t drawCount = instanceDrawInfo.drawCount;
    uint32_t drawIndex = instanceDrawInfo.drawIndex;
    uint32_t drawCountAccum = subgroupExclusiveAdd(drawCount - drawIndex);

    // Find index of the last invocation with a valid index, and use
    // that to find the invocation to read draw infos from.
    int32_t dataIndex = csGetDataIndexForThread(drawCount - drawIndex, drawCountAccum);

    uint32_t validIndexBit = subgroupBallotFindMSB(
      subgroupBallot(dataIndex >= 0) & gl_SubgroupLeMask);

    dataIndex = subgroupShuffle(dataIndex, validIndexBit);

    // Adjust current iteration parameters based on invocation IDs
    InstanceDrawInfo result = csGetDrawInfoForThread(uint32_t(dataIndex));
    result.drawIndex += gl_SubgroupInvocationID - validIndexBit;
    result.drawCount = result.drawIndex < result.drawCount ? 1u : 0u;

    info = result;

    // Adjust the current invocation's parameters by the number of
    // draws that the subgroup processes in the current iteration
    uint32_t drawsProcessed = uint32_t(clamp(
      int32_t(gl_SubgroupSize) - int32_t(drawCountAccum),
      0, int32_t(drawCount - drawIndex)));

    instanceDrawInfo.drawIndex += drawsProcessed;
    return drawIndex < drawCount;
  }
}


// Helper function to or a boolean value across the entire workgroup.
// This is necessary to ensure uniform control flow even if there are
// multiple subgroups per workgroup.
shared uint32_t csAtomicBoolShared;

bool csWorkgroupAny(bool value) {
  bool result = subgroupAny(value);

  if (gl_NumSubgroups > 1u) {
    if (gl_LocalInvocationIndex == 0u)
      csAtomicBoolShared = 0u;
    barrier();

    if (gl_SubgroupInvocationID == 0u && result)
      atomicOr(csAtomicBoolShared, 1u);
    barrier();

    result = csAtomicBoolShared != 0u;
    barrier();
  }

  return result;
}


uvec2 csSelectLod(uint64_t geometryBuffer, uint32_t meshIndex, float viewDistanceSq) {
  GeometryRef geometry = GeometryRef(geometryBuffer);
  GeometryBufferPointerRef geometryBuffers = geometryGetBuffers(geometry, geometry.geometry);

  Mesh mesh = geometry.meshes[meshIndex];
  MeshLodRef meshLods = meshGetLodData(geometry, mesh);

  // Perform basic test against the mesh visibility range, passing
  // this also means that we can at least use LOD 0. 
  vec2 visibilityRange = vec2(mesh.visibilityRange);
  vec2 visibilityRangeSq = visibilityRange * visibilityRange;

  if ((viewDistanceSq < visibilityRangeSq.x) ||
      (viewDistanceSq >= visibilityRangeSq.y && visibilityRangeSq.y != 0.0f))
    return uvec2(0u, 0u);

  // LODs are ordered by view distance from least to most detailed, just
  // iterate over the list and pick an LOD for the adjusted view distance.
  uvec2 result = uvec2(0u, meshLods.lods[0].meshletCount);

  for (uint32_t i = 1; i < uint32_t(mesh.lodCount); i++) {
    float maxDistance = float(meshLods.lods[i].maxDistance);
    float maxDistanceSq = maxDistance * maxDistance;

    if (viewDistanceSq >= maxDistanceSq && maxDistance != 0.0f)
      break;

    // Also make sure that meshlet data is present for the current LOD.
    uint bufferIndex = meshLods.lods[i].bufferIndex;

    if (bufferIndex > 0u && uint64_t(geometryBuffers.buffers[bufferIndex - 1u]) == uint64_t(0u))
      break;

    result = uvec2(i, meshLods.lods[i].meshletCount);
  }

  return result;
}


void csEmitDraw(in InstanceDrawInfo drawInfo) {
  // Load draw properties from memory
  InstanceNode instanceNode = csLoadInstanceNode(drawInfo.instanceIndex);

  InstanceDataBufferIn instanceData = InstanceDataBufferIn(instanceNode.propertyBuffer);
  InstanceDrawBuffer instanceDraws = InstanceDrawBuffer(instanceNode.propertyBuffer + instanceData.header.drawOffset);
  InstanceDraw draw = instanceDraws.draws[drawInfo.drawIndex];

  // Select mesh LOD based on the precomputed view distance, and skip
  // the draw if there is no suitable LOD for the current mesh.
  uvec2 lodInfo = csSelectLod(instanceNode.geometryBuffer,
    draw.meshIndex, drawInfo.viewDistanceSq);

  uint32_t lodIndex = lodInfo.x;
  uint32_t lodMeshletCount = lodInfo.y;

  if (lodMeshletCount == 0u)
    return;

  // Compute addresses of the various output arrays
  DrawListBuffer drawList = DrawListBuffer(globals.drawListVa);
  DrawInstanceInfoBufferOut drawInfos = DrawInstanceInfoBufferOut(globals.drawListVa + drawList.header.drawInfoOffset);
  DrawParameterBufferOut drawArgs = DrawParameterBufferOut(globals.drawListVa + drawList.header.drawParameterOffset);

  // Emit actual draw parameters
  DrawInstanceInfo drawInstanceInfo;
  drawInstanceInfo.instanceAndLod = drawPackInstanceAndLod(drawInfo.instanceIndex, lodIndex);
  drawInstanceInfo.meshIndex = draw.meshIndex;
  drawInstanceInfo.meshInstance = draw.meshInstanceIndex;
  drawInstanceInfo.shadingDataOffset = draw.shadingParameterOffset;
  drawInstanceInfo.passMask = drawInfo.passMask;

  u32vec3 drawParameters = u32vec3(0u);
  drawParameters.x = asComputeWorkgroupCount1D(lodMeshletCount, CsTaskShaderWorkgroupSize);
  drawParameters.y = draw.meshInstanceCount;
  drawParameters.z = bitCount(drawInfo.passMask);

  drawListAdd(drawList, drawInfos, drawArgs,
    draw.materialIndex, drawInstanceInfo, drawParameters);
}


void csGenerateDraws() {
  uint32_t gid = gl_GlobalInvocationID.x;

  PassGroupBuffer group = PassGroupBuffer(globals.passGroupVa);

  PassGroupNodeListIn nodeList = PassGroupNodeListIn(globals.passGroupVa +
    group.nodeListOffsets[NODE_TYPE_INSTANCE - NODE_TYPE_BUILTIN_COUNT].nodeList);

  csInitDrawInfo();

  if (gid < nodeList.header.entryCount) {
    PassGroupNodeListItem nodeItem = nodeList.items[gid];
    instanceDrawInfo.instanceIndex = getNodeIndexFromRef(nodeItem.nodeRef);

    InstanceNode instance = csLoadInstanceNode(instanceDrawInfo.instanceIndex);

    SceneHeader scene = SceneHeader(globals.sceneVa);

    bool hasInstanceData = instance.propertyBuffer != uint64_t(0u);
    bool hasGeometryData = instance.geometryBuffer != uint64_t(0u);

    if (hasInstanceData && hasGeometryData) {
      InstanceDataBufferIn instanceData = InstanceDataBufferIn(instance.propertyBuffer);
      uint32_t transformIndex = nodeComputeTransformIndices(instance.nodeIndex, scene.nodeCount, globals.frameId).x;

      SceneNodeTransformBufferIn nodeTransforms = SceneNodeTransformBufferIn(globals.sceneVa + scene.nodeTransformOffset);
      Transform worldTransform = nodeTransforms.nodeTransforms[transformIndex].absoluteTransform;

      // Compute bit mask of passes to test, then scalarize the pass mask
      // across all invocations. This is generally efficient since the pass
      // masks are not expected to diverge heavily.
      instanceDrawInfo.passMask = globals.passMask & nodeItem.partialVisibilityMask;
      uint32_t passMaskUniform = subgroupOr(instanceDrawInfo.passMask);

      while (passMaskUniform != 0u) {
        uint32_t passIndex = findLSB(passMaskUniform);
        uint32_t passBit = 1u << passIndex;

        // Remap pass index and load render pass metadata
        passIndex = passGroupGetPassIndex(globals.passGroupVa, passIndex);
        PassInfo passInfo = PassInfoBufferIn(globals.passInfoVa).passes[passIndex];

        // Ignore the instance if BVH-level visibility tests already failed for the current pass.
        bool isVisible = (instanceDrawInfo.passMask & passBit) != 0;

        if (isVisible) {
          // If the bounding box is empty, ignore it and always render the instance.
          // This essentially assumes that the instance is infinitely large.
          Aabb aabb = Aabb(
            vec3(instanceData.header.aabb.lo),
            vec3(instanceData.header.aabb.hi));

          float aabbRadiusSq = dot(aabb.hi - aabb.lo, aabb.hi - aabb.lo) * 0.5f;

          if (aabbRadiusSq > 0.0f) {
            // Compute final view transform. Used for both distance and frustum tests.
            Transform viewTransform = transChainNorm(passInfo.currTransform.transform, worldTransform);

            // Adjust bounding box size by transform scaling factor
            float aabbScale = quatGetScale(viewTransform.rot);
            aabbRadiusSq *= aabbScale * aabbScale;

            // If the current render pass has a limited view distance, test the distance to
            // the bounding sphere around the transformed AABB. This is conservative, but
            // is reasonably fast. Further culling can happen at a per-meshlet level.
            float maxDistance = passInfo.viewDistanceLimit;

            if (maxDistance > 0.0f) {
              vec3 aabbCenter = csTransformVertex(passInfo, viewTransform, aabbComputeCenter(aabb));
              isVisible = testSphereDistance(aabbCenter, aabbRadiusSq, maxDistance * maxDistance);
            }

            // Perform frustum culling. The idea is to test every transformed vertex of
            // the bounding box against the view frustum for non-cube map passes. Control
            // flow is expected to be relatively uniform up until this point; do not try
            // to parallelize instance-level culling any further.
            if ((passInfo.flags & RENDER_PASS_IS_CUBE_MAP_BIT) == 0u && isVisible) {
              vec3 v0 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 0));
              vec3 v1 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 1));
              vec3 v2 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 2));
              vec3 v3 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 3));
              vec3 v4 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 4));
              vec3 v5 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 5));
              vec3 v6 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 6));
              vec3 v7 = csTransformVertex(passInfo, viewTransform, aabbComputeVertex(aabb, 7));

              for (uint32_t i = 0; i < 6 && isVisible; i++) {
                vec4 frustumPlane = passInfo.frustum.planes[i];

                float d012 = max(max(
                  planeDistanceToPoint(frustumPlane, v0),
                  planeDistanceToPoint(frustumPlane, v1)),
                  planeDistanceToPoint(frustumPlane, v2));
                float d345 = max(max(
                  planeDistanceToPoint(frustumPlane, v3),
                  planeDistanceToPoint(frustumPlane, v4)),
                  planeDistanceToPoint(frustumPlane, v5));
                float d67 = max(
                  planeDistanceToPoint(frustumPlane, v6),
                  planeDistanceToPoint(frustumPlane, v7));

                isVisible = max(max(d012, d345), d67) >= 0.0f;
              }
            }
          }

          if (!isVisible)
            instanceDrawInfo.passMask -= passBit;
        }

        passMaskUniform -= passBit;
      }

      if (instanceDrawInfo.passMask != 0u) {
        instanceDrawInfo.drawCount = instanceData.header.drawCount;
        instanceDrawInfo.viewDistanceSq = csComputeLodDistance(
          instance.geometryBuffer, worldTransform);
      }
    }
  }

  // Process draws for each instance with a non-zero visibility mask.
  // This may still skip draws in case there is no suitable LOD for
  // a given mesh within the current pass.
  InstanceDrawInfo drawInfo;

  while (csWorkgroupAny(csPrepareNextIteration(drawInfo))) {
    if (drawInfo.drawCount > 0u)
      csEmitDraw(drawInfo);
  }
}

#include "../../as_include_tail.glsl"
